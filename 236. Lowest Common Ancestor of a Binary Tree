/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
            while(root){
                if(root->val==q->val||root->val==p->val)
                    return root;
                else if(root->left==NULL&&root->right!=NULL)
                    root=root->right;
                else if(root->right==NULL&&root->left!=NULL)
                    root=root->left;
                else if(contains(root->left,p,q)&&contains(root->right,p,q))
                    return root;
                else if(contains(root->left,p,q)&&!contains(root->right,p,q))
                    root=root->left;
                else if(!contains(root->left,p,q)&&contains(root->right,p,q))
                    root=root->right;
            }
        return root;
    }
    bool contains(TreeNode*root,TreeNode*p,TreeNode*q){

        if(root->val==q->val)
            return true;
        else if(root->val==p->val)
            return true;
        else if(root->left==NULL&&root->right==NULL)
            return false;
        else if (root->right==NULL&&root->left!=NULL)
            return contains(root->left,p,q);
        else if (root->left==NULL&&root->right!=NULL)
            return contains(root->right,p,q);
        else if (root->left!=NULL&&root->right!=NULL)
            return contains(root->left,p,q)||contains(root->right,p,q);
        return false;
    }
};
