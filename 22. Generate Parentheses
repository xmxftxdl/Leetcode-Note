class Solution {  
public:  
    vector<string> generateParenthesis(int n) {  
        str.clear();
        vector<string>res;
        for(int i=0;i<n*2;i++){
            str.push_back(0);
        }
        num=n;
        backtracking(res,0);
        return res;
    }  
    int l;
    int r;
    int num;
    string str;
  void backtracking(vector<string>&res,int k){
      if(k==num*2)
          res.push_back(str);
      else{
          if(l<num){
              str[k]='(';
              l++;
              backtracking(res,k+1);
              l--;
          }
          if(r<l&&r<num){
              str[k]=')';
              r++;
              backtracking(res,k+1);
              r--;
          }
      }
  }
};  
