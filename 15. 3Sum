class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
       
        vector<vector<int>>res;
       
        if(nums.size()<=2){
            return res;
        }
        int add;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-2;i++){
            vector<int>r;
            int j=i+1;
            int k=nums.size()-1;
            while(j<k){
            add=nums[i]+nums[j]+nums[k];
            if(add>0){
               --k;
            }
            if(add<0){
                ++j;
            }
            if(add==0){  
               r.push_back(nums[i]);
               r.push_back(nums[j]);
               r.push_back(nums[k]);
               res.push_back(r);
               r.erase(r.begin(),r.end());
                --k;
                ++j;
                while(j < k&&nums[j-1] == nums[j])
                    ++j;
                while(j < k&&nums[k] == nums[k+1])
                    --k;
            }
        }while(i < nums.size()-1&&nums[i] == nums[i+1])
                     ++i;
        }

        
    return res;
    }
};

// Find all unique triplets in the array which gives the sum of zero.
//Given array nums = [-1, 0, 1, 2, -1, -4],

//output:
//[
  //[-1, 0, 1],
  //[-1, -1, 2]
//]
